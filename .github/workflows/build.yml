# This workflow will install Python dependencies and run tests on
# windows and linux systems with a variety of Python versions

# For more information see:
# https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Automated Tests

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * *' # daily

jobs:
  build:
    name: py${{ matrix.python-version }} @ ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: "ubuntu-latest"
            python-version: '3.8'  # first supported
          - os: "windows-latest"
            python-version: '3.8'  # first supported
          - os: "ubuntu-latest"
            python-version: '3.12'  # latest supported
          - os: "windows-latest"
            python-version: '3.12'  # latest supported
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
          lfs: true
      - name: Checkout LFS objects
        run: git lfs checkout
      - uses: mamba-org/setup-micromamba@v2
        with:
          micromamba-version: "1.5.10-0"
          environment-file: environment.yml
          create-args: python=${{ matrix.python-version }}
          post-cleanup: "all"
          init-shell: >-
            bash
            powershell
      - name: Print Infos
        shell: bash -l {0}
        run: |
          ls -R tests/smos-test-data
          conda info -a
          which pip
          which python
          conda list
      - name: Export Environment
        shell: bash -l {0}
        run: |
          mkdir -p artifacts
          filename=env_py${{ matrix.python-version }}_${{ matrix.os }}.yml
          conda env export --no-builds | grep -v "prefix" > artifacts/$filename
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Artifacts-py${{ matrix.python-version }}-${{ matrix.os }}
          path: artifacts/*
      - name: Install base package and run tests
        shell: bash -l {0}
        run: |
          pip install -e .[testing]
          pytest
      - name: Upload Coverage
        shell: bash -l {0}
        run: |
          pip install coveralls && coveralls --service=github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_FLAG_NAME: ${{ matrix.python-version }}
          COVERALLS_PARALLEL: true
      - name: Create wheel and dist package
        shell: bash -l {0}
        run: |
          pip install setuptools_scm
          if [ ${{ matrix.os }} == "windows-latest" ]
          then
            # build whls on windows
            pip install wheel
            python setup.py bdist_wheel --dist-dir artifacts/dist
          else
            # build dist on linux
            python setup.py sdist --dist-dir artifacts/dist
          fi
          ls artifacts/dist
  coveralls:
    name: Submit Coveralls ðŸ‘š
    needs: build
    runs-on: ubuntu-latest
    container: python:3-slim
    steps:
      - name: Finished
        run: |
          pip3 install --upgrade coveralls && coveralls --service=github --finish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  publish:
    name: Upload to PyPI ðŸš€
    if: startsWith(github.ref, 'refs/tags/v') && startsWith(github.repository, 'TUW-GEO')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Print environment variables
        run: |
          echo "GITHUB_REF = $GITHUB_REF"
          echo "GITHUB_REPOSITORY = $GITHUB_REPOSITORY"
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: Artifacts
          pattern: Artifacts-*
          merge-multiple: true
      - name: Display downloaded files
        run: ls -aR
      - name: Upload to PyPI
        uses: pypa/gh-action-pypi-publish@v1.4.1
        with:
          skip_existing: true
          verbose: true
          verify_metadata: true
          packages_dir: Artifacts/dist/
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }} # this needs to be uploaded to github actions secrets